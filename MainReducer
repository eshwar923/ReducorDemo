package com.demo;

import java.util.Arrays;
import java.util.List;
import java.util.function.BinaryOperator;

public class MainReducer {
    
    public static void main(String[] args) {
	List<Integer> ints =Arrays.asList(2,3,4,5,6,7,8,9);
	List<Integer> ints1 = Arrays.asList(2,3,4);
	List<Integer> ints2 = Arrays.asList(5,6,7,8,9);
	
	//BinaryOperator<Integer> op = Integer::sum;
	//BinaryOperator<Integer> op = Integer::max;	
		//ABove both opertns are assosciative
	
	//BinaryOperator<Integer> op = (i1,i2)-> (i1+i2)*(i1+i2);	//It is non-assosc oprtn, so cant process parallel oprtn as it results with diff value.
	
	//BinaryOperator<Integer> op = (i1,i2)->i1; //returns 0 in both parallel and nrml executn, as its assosc oprtn
	
	//BinaryOperator<Integer> op = (i1,i2)->(i1+i2)/2;	// It doesnt compute avg of list and it isnt assoc oprtn, so returns diff values
	//BinaryOperator<Integer> op = (i1,i2)->i1*i2;	//for multip, identity val should be 1 and as it is assosc oprtn, both the results are same
	BinaryOperator<Integer> op = (i1,i2)->(i1*i2)/2;	//not an assoc opertn
	
//	int reduction = reduce(ints, 1, op);
	int red1 = reduce(ints1,1,op);
	int red2 = reduce(ints2,1,op);
	int reduction = reduce(Arrays.asList(red1,red2), 1,op);
	
	
	System.out.println("reduction:  "+reduction);
	
	
    }
    
    
    static int reduce(List<Integer> values, int valIfEmpty/*identity value*/, BinaryOperator<Integer> reduction) {
	int res = valIfEmpty;
	for(int i: values) {
	    res = reduction.apply(res, i);
	}
	return res;
    }

}
